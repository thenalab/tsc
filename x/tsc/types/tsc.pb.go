// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: tsc/tsc.proto

package types

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// Params defines the parameters for the tsc module.
type Params struct {
	// max_supply defines the max supply of tsc coin.
	MaxSupply              string   `protobuf:"bytes,1,opt,name=max_supply,json=maxSupply,proto3" json:"max_supply,omitempty" yaml:"max_supply"`
	ExcludeCirculatingAddr []string `protobuf:"bytes,2,rep,name=exclude_circulating_addr,json=excludeCirculatingAddr,proto3" json:"exclude_circulating_addr,omitempty" yaml:"exclude_circulating_addr"`
}

func (m *Params) Reset()         { *m = Params{} }
func (m *Params) String() string { return proto.CompactTextString(m) }
func (*Params) ProtoMessage()    {}
func (*Params) Descriptor() ([]byte, []int) {
	return fileDescriptor_3d52f5884a14c7e6, []int{0}
}
func (m *Params) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Params) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Params.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Params) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Params.Merge(m, src)
}
func (m *Params) XXX_Size() int {
	return m.Size()
}
func (m *Params) XXX_DiscardUnknown() {
	xxx_messageInfo_Params.DiscardUnknown(m)
}

var xxx_messageInfo_Params proto.InternalMessageInfo

func (m *Params) GetMaxSupply() string {
	if m != nil {
		return m.MaxSupply
	}
	return ""
}

func (m *Params) GetExcludeCirculatingAddr() []string {
	if m != nil {
		return m.ExcludeCirculatingAddr
	}
	return nil
}

func init() {
	proto.RegisterType((*Params)(nil), "thenalab.tsc.tsc.Params")
}

func init() { proto.RegisterFile("tsc/tsc.proto", fileDescriptor_3d52f5884a14c7e6) }

var fileDescriptor_3d52f5884a14c7e6 = []byte{
	// 237 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x2d, 0x29, 0x4e, 0xd6,
	0x2f, 0x29, 0x4e, 0xd6, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x12, 0x28, 0xc9, 0x48, 0xcd, 0x4b,
	0xcc, 0x49, 0x4c, 0xd2, 0x03, 0x89, 0x95, 0x14, 0x27, 0x4b, 0x89, 0xa4, 0xe7, 0xa7, 0xe7, 0x83,
	0x25, 0xf5, 0x41, 0x2c, 0x88, 0x3a, 0xa5, 0xb9, 0x8c, 0x5c, 0x6c, 0x01, 0x89, 0x45, 0x89, 0xb9,
	0xc5, 0x42, 0x26, 0x5c, 0x5c, 0xb9, 0x89, 0x15, 0xf1, 0xc5, 0xa5, 0x05, 0x05, 0x39, 0x95, 0x12,
	0x8c, 0x0a, 0x8c, 0x1a, 0x9c, 0x4e, 0xa2, 0x9f, 0xee, 0xc9, 0x0b, 0x56, 0x26, 0xe6, 0xe6, 0x58,
	0x29, 0x21, 0xe4, 0x94, 0x82, 0x38, 0x73, 0x13, 0x2b, 0x82, 0xc1, 0x6c, 0xa1, 0x58, 0x2e, 0x89,
	0xd4, 0x8a, 0xe4, 0x9c, 0xd2, 0x94, 0xd4, 0xf8, 0xe4, 0xcc, 0xa2, 0xe4, 0xd2, 0x9c, 0xc4, 0x92,
	0xcc, 0xbc, 0xf4, 0xf8, 0xc4, 0x94, 0x94, 0x22, 0x09, 0x26, 0x05, 0x66, 0x0d, 0x4e, 0x27, 0xe5,
	0x4f, 0xf7, 0xe4, 0xe5, 0x21, 0x66, 0xe0, 0x52, 0xa9, 0x14, 0x24, 0x06, 0x95, 0x72, 0x46, 0xc8,
	0x38, 0xa6, 0xa4, 0x14, 0x39, 0xd9, 0x9e, 0x78, 0x24, 0xc7, 0x78, 0xe1, 0x91, 0x1c, 0xe3, 0x83,
	0x47, 0x72, 0x8c, 0x13, 0x1e, 0xcb, 0x31, 0x5c, 0x78, 0x2c, 0xc7, 0x70, 0xe3, 0xb1, 0x1c, 0x43,
	0x94, 0x72, 0x7a, 0x66, 0x49, 0x46, 0x69, 0x92, 0x5e, 0x72, 0x7e, 0xae, 0x3e, 0xcc, 0xb3, 0xa0,
	0x00, 0xd0, 0xaf, 0x00, 0x93, 0x25, 0x95, 0x05, 0xa9, 0xc5, 0x49, 0x6c, 0x60, 0x5f, 0x1a, 0x03,
	0x02, 0x00, 0x00, 0xff, 0xff, 0xa2, 0x07, 0xa1, 0x5a, 0x1e, 0x01, 0x00, 0x00,
}

func (m *Params) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Params) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Params) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ExcludeCirculatingAddr) > 0 {
		for iNdEx := len(m.ExcludeCirculatingAddr) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.ExcludeCirculatingAddr[iNdEx])
			copy(dAtA[i:], m.ExcludeCirculatingAddr[iNdEx])
			i = encodeVarintTsc(dAtA, i, uint64(len(m.ExcludeCirculatingAddr[iNdEx])))
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.MaxSupply) > 0 {
		i -= len(m.MaxSupply)
		copy(dAtA[i:], m.MaxSupply)
		i = encodeVarintTsc(dAtA, i, uint64(len(m.MaxSupply)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintTsc(dAtA []byte, offset int, v uint64) int {
	offset -= sovTsc(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Params) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.MaxSupply)
	if l > 0 {
		n += 1 + l + sovTsc(uint64(l))
	}
	if len(m.ExcludeCirculatingAddr) > 0 {
		for _, s := range m.ExcludeCirculatingAddr {
			l = len(s)
			n += 1 + l + sovTsc(uint64(l))
		}
	}
	return n
}

func sovTsc(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTsc(x uint64) (n int) {
	return sovTsc(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Params) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTsc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Params: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Params: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxSupply", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTsc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTsc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTsc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MaxSupply = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExcludeCirculatingAddr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTsc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTsc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTsc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ExcludeCirculatingAddr = append(m.ExcludeCirculatingAddr, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTsc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTsc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTsc(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTsc
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTsc
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTsc
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTsc
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTsc
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTsc
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTsc        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTsc          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTsc = fmt.Errorf("proto: unexpected end of group")
)
